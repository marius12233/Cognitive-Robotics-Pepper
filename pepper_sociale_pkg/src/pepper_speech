#!/usr/bin/env python
import rospy
from utils.Classmap import category_map as classmap
from pepper_sociale_pkg.srv import Say
from pepper_sociale_pkg.msg import DetectionInfo

"""
Questo file inizializza un nodo, chiamato pepper_speech,il quale si occupa di tenere traccia dello stato in cui si trova il robot e degli oggetti individuati dal detector in ognuno di questi stati. Utilizza un Subscriber che si iscrive al topic detection_and_head_position sul
quale pepper_object_recognition pubblica le informazioni appunto sullo stato e sugli oggetti.
Quando pepper_object_recognition indica la fine delle sue operazioni, il nodo costruisce la stringa da inviare
al servizio animated_speech, che permette di interagire con le API di NAOqi e consente al robot di parlare.
"""
# initializza il nodo
rospy.init_node('pepper_speech')

# dizionario che traccia degli oggetti identificati nelle posizioni assunte dalla testa di Pepper
pos_obj = {"left": {}, "center": {}, "right": {}}


# chiama il servizio animated_say
def call_srv(text):
    """
    Funzione che chiama il servizio animated_say, che permette a Pepper di parlare.
    """
    rospy.wait_for_service('animated_say')
    animated_say = rospy.ServiceProxy('animated_say', Say)
    try:
        resp1 = animated_say(text)
    except rospy.ServiceException as exc:
        print("Service did not process request: " + str(exc))


def rcv_detection_and_head_pos(msg):
    """
    Funzione di callback invocata quando viene ricevuto un messaggio DetectInfo.
    Essa permette a Pepper di:
    - inviare un messaggio di saluto prima che inizi a girare la testa
    - tenere traccia degli oggetti in ogni posizione in cui si trova il robot
    - quando il robot arriva nella posizione di home, costruisce la frase che Pepper dovra pronunciare.
    """
    global pos_obj
    current_pos = msg.head_position
    if current_pos == 'start':
        call_srv("Hello to everyone. I'm going to inspect the room.")
    elif current_pos != 'home': # se non sono nella posizione di home riempie il dizionario con gli oggetti in ogni posizione
        detected_objs = {}
        for d in msg.detections:
            c = d.results[0].id
            detected_objs[classmap[c]] = 1
        pos_obj[current_pos] = detected_objs
    else: # costruisce la stringa da inviare al service per permettere a Pepper di parlare
        content = "I can see "
        for position in ['left', 'center', 'right']:
            content += " at "+position+' : '
            classes = pos_obj[position].keys()
            if len(classes) <= 0:
                content += "nothing, "
            for _cls in classes:
                content += _cls+", "
        content+=" goodbye."
        call_srv(content)
        
        

shd = rospy.Subscriber("detection_and_head_position",
                       DetectionInfo, rcv_detection_and_head_pos)
try:
    rospy.spin()

except KeyboardInterrupt:
    print("Shutting down")
